Index: src/Game.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Game.java	(date 1526686526250)
+++ src/Game.java	(date 1526686526250)
@@ -3,12 +3,18 @@
 import biuoop.Sleeper;
 import java.awt.Color;
 import java.util.Random;
+import biuoop.KeyboardSensor;
 /**
  * A game class.
  *
  * @author Omer Wolf.
  */
 public class Game implements Animation{
+    static final int SCREEN_WIDTH = 800;
+    static final int SCREEN_LENGTH = 600;
+    static final int INIT_NUM_OF_LIVES = 2;
+    static final int INIT_NUM_OF_BALLS = 8;
+
     private SpriteCollection sprites;
     private GameEnvironment gameE;
     private GUI gui;
@@ -16,13 +22,21 @@
     private Counter remainingBalls;
     private Counter scoreTrakingCounter;
     private Counter remainingLives;
-    private BallRemover ballRemover;
-    private ScoreTrackingListener scoreTrackingListener;
     private AnimationRunner runner;
     private boolean isRunning;
-    private static int screenWidth = 800;
-    private static int screenLength = 600;
-     /**
+    private KeyboardSensor keyboardSensor;
+
+
+    public Game() {
+        this.gui = new GUI("Arkanoid", SCREEN_WIDTH, SCREEN_LENGTH);
+        this.sprites = new SpriteCollection();
+        this.gameE = new GameEnvironment();
+        Sleeper sleeper = new Sleeper();
+        this.runner = new AnimationRunner(this.gui, 60, sleeper);
+        this.keyboardSensor = this.gui.getKeyboardSensor();
+    }
+
+    /**
      * @param c - a collidable.
      * add a collidable to the list of game environment.
      */
@@ -41,32 +55,104 @@
             this.sprites = new SpriteCollection();
         }
         this.sprites.addSprite(s);
+    }
+    public void initBorders() {
+        int borderSize = 25;
+        Rectangle blockRightR =
+                new Rectangle(new Point(SCREEN_WIDTH - borderSize, 0), borderSize, SCREEN_LENGTH, Color.GRAY);
+        Block blockRight = new Block(blockRightR);
+
+        Rectangle blockLeftR = new Rectangle(new Point(0, 0), borderSize, SCREEN_LENGTH, Color.GRAY);
+        Block blockLeft = new Block(blockLeftR);
+
+        Rectangle blockUpR = (new Rectangle(new Point(0, borderSize), SCREEN_WIDTH, borderSize, Color.GRAY));
+        Block blockUp = new Block(blockUpR);
+        ///create the white top border
+        Rectangle blockUpRW = (new Rectangle(new Point(0, 0), SCREEN_WIDTH, borderSize, Color.WHITE));
+        Block blockUpW = new Block(blockUpRW);
+        ///initialize death-region
+        BallRemover ballRemover = new BallRemover(this, this.remainingBalls);
+        Block deathRegion = initDeathRegion(borderSize, ballRemover);
+
+        Block[] borderBlocks = new Block[5];
+        borderBlocks[0] = deathRegion;
+        borderBlocks[1] = blockRight;
+        borderBlocks[2] = blockLeft;
+        borderBlocks[3] = blockUp;
+        borderBlocks[4] = blockUpW;
+        for (Block borders : borderBlocks) {
+            borders.addToGame(this);
+        }
+    }
+    public void initCounters() {
+        ///initialize lives counter
+        this.remainingLives = new Counter(INIT_NUM_OF_LIVES);
+        ///initialize balls counter
+        this.remainingBalls = new Counter(INIT_NUM_OF_BALLS);
+        ///initialize score counter
+        this.scoreTrakingCounter = new Counter();
+        //initialize blocks counter
+        this.remainingBlocks = new Counter();
+    }
+    public void initIndicator() {
+         ///initialize score indicator
+        ScoreIndicator scoreIndicator = new ScoreIndicator(this.scoreTrakingCounter);
+        scoreIndicator.addToGame(this);
+
+        ///initialize lives indicator
+        LivesIndicator livesIndicator = new LivesIndicator(this.remainingLives);
+        livesIndicator.addToGame(this);
+    }
+
+    public void initBalls() {
+        Ball[] ballsArr = new Ball[8];
+        int ballRadius = 5;
+        ballsArr[0] = new Ball(new Point(400, 500), ballRadius, Color.WHITE);
+        ballsArr[1] = new Ball(new Point(450, 400), ballRadius, Color.WHITE);
+        ballsArr[2] = new Ball(new Point(400, 500), ballRadius, Color.WHITE);
+        ballsArr[3] = new Ball(new Point(450, 400), ballRadius, Color.WHITE);
+        ballsArr[4] = new Ball(new Point(400, 500), ballRadius, Color.WHITE);
+        ballsArr[5] = new Ball(new Point(450, 400), ballRadius, Color.WHITE);
+        ballsArr[6] = new Ball(new Point(400, 500), ballRadius, Color.WHITE);
+        ballsArr[7] = new Ball(new Point(450, 400), ballRadius, Color.WHITE);
+        for (Ball balls : ballsArr) {
+            balls.setBallGE(gameE);
+            balls.setVelocity(3, 3);
+            remainingBalls.increase();
+            balls.addToGame(this);
+        }
+    }
+    public void createBallsOnTopOfPaddle() {
+        ///initialize Paddel
+        int paddelWidth = 200;
+        int paddelLength = 20;
+        Point startLoc = new Point(SCREEN_WIDTH / 2 - paddelWidth / 2, SCREEN_LENGTH - paddelLength);
+        Rectangle rec = new Rectangle(startLoc, paddelWidth, paddelLength);
+        rec.setColor(Color.yellow);
+        Paddle paddle = new Paddle(rec, this.keyboardSensor);
+        paddle.addToGame(this);  //Sprites[0] & gameE[0] == paddle
+
+
+        ///initialize Balls
+        this.initBalls();
+
     }
     /**
      * Initialize a new game: create the Blocks and Ball (and Paddle)
      * and add them to the game.
      */
     public void initialize() {
-        this.gui = new GUI("Arkanoid", screenWidth, screenLength);
-        this.gameE = new GameEnvironment();
-        ///initialize life listener
-        int numOfLives = 2;
-        this.remainingLives = new Counter(numOfLives);
-
-
+        this.initCounters();
+        this.initBorders();
+        this.initIndicator();
         ///initialize block listener
-        this.remainingBlocks = new Counter();
         BlockRemover blockRemover = new BlockRemover(this, this.remainingBlocks);
         ///initialize ball listener
-        this.remainingBalls = new Counter();
-        this.ballRemover = new BallRemover(this, this.remainingBalls);
+        BallRemover ballRemover = new BallRemover(this, this.remainingBalls);
         ///initialize score listener
-        this.scoreTrakingCounter = new Counter();
-        this.scoreTrackingListener = new ScoreTrackingListener(this, this.scoreTrakingCounter);
+        ScoreTrackingListener scoreTrackingListener = new ScoreTrackingListener(this, this.scoreTrakingCounter);
         ///initialize print hit listeners
         PrintingHitListener phl = new PrintingHitListener();
-
-
         ///initialize Blocks
         int blockWidth = 60;
         int blockLength = 30;
@@ -75,48 +161,24 @@
         for (int i = 0; i < numOfRows; i++) {
             Color randomColor = this.generateRandomColor();
             for (int j = 0; j < maxCol - i; j++) {
-                this.remainingBlocks.increase();
-                Point upP = new Point(screenWidth - 100 - blockWidth * j, 100 + blockLength * i);
+                Point upP = new Point(SCREEN_WIDTH - 100 - blockWidth * j, 100 + blockLength * i);
                 Rectangle rBlock = new Rectangle(upP, blockWidth, blockLength, randomColor);
                 Block newBlock = new Block(rBlock);
-                newBlock.addHitListener(phl);
-                newBlock.addHitListener(blockRemover);
-                newBlock.addHitListener(scoreTrackingListener);
-                newBlock.addToGame(this);
+
                 if (i == 0) {
                     newBlock.setHitsCount(2);
                 } else {
                     newBlock.setHitsCount(1);
                 }
+                newBlock.addHitListener(phl);
+                newBlock.addHitListener(blockRemover);
+                newBlock.addHitListener(scoreTrackingListener);
+                this.remainingBlocks.increase();
+                newBlock.addToGame(this);
             }
         }
 
-        ///initialize Border
-        int borderSize = 25;
-        Rectangle blockRightR =
-             new Rectangle(new Point(screenWidth - borderSize, 0), borderSize, screenLength, Color.GRAY);
-        Block blockRight = new Block(blockRightR);
-
-        Rectangle blockLeftR = new Rectangle(new Point(0, 0), borderSize, screenLength, Color.GRAY);
-        Block blockLeft = new Block(blockLeftR);
 
-        Rectangle blockUpR = (new Rectangle(new Point(0, borderSize), screenWidth, borderSize, Color.GRAY));
-        Block blockUp = new Block(blockUpR);
-        ///create the white top border
-        Rectangle blockUpRW = (new Rectangle(new Point(0, 0), screenWidth, borderSize, Color.WHITE));
-        Block blockUpW = new Block(blockUpRW);
-        ///initialize death-region
-        Block deathRegion = initializeDeathRegion(borderSize, ballRemover);
-
-        Block[] borderBlocks = new Block[5];
-        borderBlocks[0] = deathRegion;
-        borderBlocks[1] = blockRight;
-        borderBlocks[2] = blockLeft;
-        borderBlocks[3] = blockUp;
-        borderBlocks[4] = blockUpW;
-        for (Block borders : borderBlocks) {
-            borders.addToGame(this);
-        }
 
 
 
@@ -127,10 +189,8 @@
      */
     public void playOneTurn() {
 
-        Paddle paddle = this.createBallsOnTopOfPaddle();
-        this.createIndicators();
+        this.createBallsOnTopOfPaddle();
         this.isRunning = true;
-        this.doOneFrame(runner.getGui().getDrawSurface());
         this.runner.run(this);
         /*
         Sleeper sleeper = new Sleeper();
@@ -156,15 +216,14 @@
             System.out.println("lives = " + remainingLives.getValue());
         }
         */
-        removeSprite(paddle);
-        removeCollidable(paddle);
+
     }
     void run() {
         while (this.remainingLives.getValue() > 0) {
             this.playOneTurn();
             this.remainingLives.decrease();
         }
-        gui.close();
+        return;
     }
       /**
      * Generate a Random Color.
@@ -192,9 +251,9 @@
     public void removeSprite(Sprite s) {
         sprites.removeSprite(s);
     }
-    public Block initializeDeathRegion(int borderSize, BallRemover ballRemover) {
+    public Block initDeathRegion(int borderSize, BallRemover ballRemover) {
         Rectangle deathRegionR =
-                new Rectangle(new Point(0, screenLength), screenWidth, borderSize, Color.GRAY);
+                new Rectangle(new Point(0, SCREEN_LENGTH), SCREEN_WIDTH, borderSize, Color.GRAY);
         Block deathRegion = new Block(deathRegionR);
         deathRegion.setDeathRegion(true);
         deathRegion.addHitListener(ballRemover);
@@ -211,15 +270,19 @@
     @Override
     public void doOneFrame(DrawSurface ds) {
         ///initialize background
-        Rectangle backGround = new Rectangle(new Point(0, 0), screenWidth, screenLength);
-        backGround.setColor(Color.blue);
-        backGround.drawOn(ds);
+        this.initBackground(ds);
         this.sprites.drawAllOn(ds);
-
         this.sprites.notifyAllTimePassed();
+
         ///check the num remaining blocks or balls equal to zero
         if (this.remainingBlocks.getValue() == 0) {
             this.isRunning = false;
+            return;
+        }
+        if (this.remainingBalls.getValue() == 0) {
+            this.remainingLives.decrease();
+            this.isRunning = false;
+            return;
         }
     }
 
@@ -227,44 +290,11 @@
     public boolean shouldStop() {
         return !this.isRunning;
     }
-    public Paddle createBallsOnTopOfPaddle() {
-        ///initialize Paddel
-        int paddelWidth = 200;
-        int paddelLength = 20;
-        Point startLoc = new Point(screenWidth / 2 - paddelWidth / 2, screenLength - paddelLength);
-        Rectangle rec = new Rectangle(startLoc, paddelWidth, paddelLength);
-        rec.setColor(Color.yellow);
-        Paddle paddle = new Paddle(rec, gui.getKeyboardSensor());
-        paddle.addToGame(this);  //Sprites[0] & gameE[0] == paddle
+    public void initBackground(DrawSurface ds) {
+        Rectangle backGround = new Rectangle(new Point(0, 0), SCREEN_WIDTH, SCREEN_LENGTH);
+        backGround.setColor(Color.blue);
+        backGround.drawOn(ds);
+    }
 
 
-        ///initialize Balls
-        Ball[] ballsArr = new Ball[8];
-        ballsArr[0] = new Ball(new Point(400, 500), 5, Color.WHITE);
-        ballsArr[1] = new Ball(new Point(450, 400), 5, Color.WHITE);
-        ballsArr[2] = new Ball(new Point(400, 500), 5, Color.WHITE);
-        ballsArr[3] = new Ball(new Point(450, 400), 5, Color.WHITE);
-        ballsArr[4] = new Ball(new Point(400, 500), 5, Color.WHITE);
-        ballsArr[5] = new Ball(new Point(450, 400), 5, Color.WHITE);
-        ballsArr[6] = new Ball(new Point(400, 500), 5, Color.WHITE);
-        ballsArr[7] = new Ball(new Point(450, 400), 5, Color.WHITE);
-        for (Ball balls : ballsArr) {
-            balls.setBallGE(gameE);
-            balls.setVelocity(3, 3);
-            balls.addHitListener(ballRemover);
-            balls.addHitListener(scoreTrackingListener);
-            remainingBalls.increase();
-            balls.addToGame(this);
-        }
-        return paddle;
-    }
-    public void createIndicators() {
-        ///initialize score indicator
-        ScoreIndicator scoreIndicator = new ScoreIndicator(this.scoreTrakingCounter);
-        scoreIndicator.addToGame(this);
-
-        ///initialize lives indicator
-        LivesIndicator livesIndicator = new LivesIndicator(this.remainingLives);
-        livesIndicator.addToGame(this);
-    }
 }
